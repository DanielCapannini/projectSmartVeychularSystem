import cv2
import numpy as np

# Carica l'immagine della strada
image = cv2.imread("street_image.jpg")
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Applica una trasformazione di Canny per rilevare i bordi
edges = cv2.Canny(gray, 50, 150, apertureSize=3)

# Esegui la trasformata di Hough probabilistica per individuare le linee
lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=100, minLineLength=100, maxLineGap=10)

# Disegna le linee rilevate sull'immagine originale
if lines is not None:
    for line in lines:
        x1, y1, x2, y2 = line[0]
        cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)

# Mostra l'immagine con le linee rilevate
cv2.imshow("Detected Lines", image)
cv2.waitKey(0)
cv2.destroyAllWindows()

import cv2
import numpy as np

# Carica l'immagine
image = cv2.imread("your_image.jpg")

# Converti l'immagine in scala di grigi
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Calcola una soglia per identificare i pixel più chiari
_, thresholded = cv2.threshold(gray_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# Trova i pixel bianchi nell'immagine thresholded
white_pixels = np.where(thresholded == 255)

# Crea una maschera per estrarre solo i pixel più chiari del 90% per 100%
mask = np.zeros_like(gray_image)
mask[white_pixels] = gray_image[white_pixels]

# Visualizza l'immagine con solo le parti più chiare del 90% per 100%
cv2.imshow("Brightest Parts", mask)
cv2.waitKey(0)
cv2.destroyAllWindows()



# Carica l'immagine
image = cv2.imread("your_image.jpg")

# Converti l'immagine in scala di grigi
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Calcola una soglia per identificare i pixel più chiari
_, thresholded = cv2.threshold(gray_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# Trova i pixel bianchi nell'immagine thresholded
white_pixels = np.where(thresholded == 255)

# Calcola la soglia personalizzata per estrarre il 95% dei pixel più chiari
sorted_pixels = np.sort(gray_image[white_pixels])
threshold_value = sorted_pixels[int(0.95 * len(sorted_pixels))]

# Applica una sogliatura personalizzata per estrarre il 95% dei pixel più chiari
_, custom_thresholded = cv2.threshold(gray_image, threshold_value, 255, cv2.THRESH_BINARY)

# Crea una maschera per estrarre solo i pixel più chiari del 95% dell'immagine
mask = np.zeros_like(gray_image)
mask[custom_thresholded == 255] = gray_image[custom_thresholded == 255]

# Visualizza l'immagine con solo le parti più chiare del 95%
cv2.imshow("Brightest Parts (95%)", mask)
cv2.waitKey(0)
cv2.destroyAllWindows()


# Definisci il kernel per le operazioni morfologiche
kernel = np.ones((5, 5), np.uint8)  # Dimensione del kernel per l'operazione morfologica

# Esegui l'operazione di apertura
image_opened = cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)

# Esegui l'operazione di chiusura
image_closed = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel)
